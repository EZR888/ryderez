It looks like you want to add back Skewness and Kurtosis to both the display and CSV output in your latest version. Below are the updates needed:

✅ Step 1: Modify calculateDescriptiveStatistics() to Include Skewness & Kurtosis
Currently, your function does not compute skewness and kurtosis in the new version. Let's add them:

js
Copy
Edit
function calculateDescriptiveStatistics(differences) {
    if (!Array.isArray(differences) || differences.length === 0) {
        throw new TypeError("The 'differences' argument must be a non-empty array.");
    }

    let n = 0, mean = 0, M2 = 0, M3 = 0, M4 = 0;
    let min = Infinity, max = -Infinity;
    differences.forEach(x => {
        n++;
        const delta = x - mean;
        const deltaN = delta / n;
        const deltaNSquared = deltaN * deltaN;
        const term1 = delta * deltaN * (n - 1);
        mean += deltaN;
        M4 += term1 * deltaNSquared * (n * n - 3 * n + 3) + 6 * deltaNSquared * M2 - 4 * deltaN * M3;
        M3 += term1 * deltaN * (n - 2) - 3 * deltaN * M2;
        M2 += term1;
        if (x < min) min = x;
        if (x > max) max = x;
    });

    const variance = M2 / n;
    const stdDev = Math.sqrt(variance);
    const skewness = (M3 / n) / Math.pow(stdDev, 3);
    const kurtosis = (M4 / n) / (variance * variance) - 3;

    return {
        mean: mean.toFixed(4),
        variance: variance.toFixed(4),
        stdDev: stdDev.toFixed(4),
        median: calculateMedian(differences),
        min,
        max,
        skewness: skewness.toFixed(4),
        kurtosis: kurtosis.toFixed(4)
    };
}
🔹 This re-adds Skewness and Kurtosis calculations.

✅ Step 2: Update displayDescriptiveStatistics()
Now, update the display function so Skewness and Kurtosis appear in the UI.

js
Copy
Edit
function displayDescriptiveStatistics(stats) {
    if (!stats || typeof stats !== "object") {
        console.error("Invalid statistics data provided for display.");
        alert("An error occurred while displaying statistics.");
        return;
    }
    const statsElement = document.getElementById("statistics");
    statsElement.innerHTML = `
        <ul>
            <li><strong><span style="color: salmon;"> Mean:</span></strong><span style="color: white;">&nbsp;&nbsp; ${stats.mean}</span></li>
            <li><strong><span style="color: salmon;">Variance:</span></strong><span style="color: white;">&nbsp;&nbsp; ${stats.variance}</span></li>
            <li><strong><span style="color: salmon;">Standard Deviation:</span></strong><span style="color: white;">&nbsp;&nbsp; ${stats.stdDev}</span></li>
            <li><strong><span style="color: salmon;">Median:</span></strong><span style="color: white;">&nbsp;&nbsp; ${stats.median}</span></li>
            <li><strong><span style="color: salmon;">Minimum:</span></strong><span style="color: white;">&nbsp;&nbsp; ${stats.min}</span></li>
            <li><strong><span style="color: salmon;">Maximum:</span></strong><span style="color: white;">&nbsp;&nbsp; ${stats.max}</span></li>
            <li><strong><span style="color: salmon;">Skewness:</span></strong><span style="color: white;">&nbsp;&nbsp; ${stats.skewness}</span></li>
            <li><strong><span style="color: salmon;">Kurtosis:</span></strong><span style="color: white;">&nbsp;&nbsp; ${stats.kurtosis}</span></li>
        </ul>
    `;
}
🔹 This ensures that Skewness and Kurtosis now appear in the displayed stats.

✅ Step 3: Add Skewness & Kurtosis to CSV Export
Modify getFreqDistCSV() so these values are also included in the CSV file.

js
Copy
Edit
function getFreqDistCSV(differences, groupSums, stats, densityValues, varianceValues) {
    if (!totalRuns || totalRuns <= 0) {
        console.error("Invalid totalRuns for CSV export:", totalRuns);
        return "";
    }

    let csvContent = "Category,Metric,Value,Skewness,Kurtosis,Expected Probability,Observed Frequency,Cumulative Probability,Adjusted P-Value\n";
    const allData = { ...differences, ...groupSums, Density: densityValues, Variance: varianceValues };

    Object.entries(stats).forEach(([category, values]) => {
        const categoryLabel = categoryLabels[category] || category;
        const frequencyDistribution = calculateFrequencyDistribution(allData[category] || []);
        const cumulativeData = calculateCumulativeProbabilities(frequencyDistribution, totalRuns);
        const sortedFrequencyKeys = Object.keys(frequencyDistribution).map(Number).sort((a, b) => a - b);
        const metricKeys = Object.keys(values);
        const maxRows = Math.max(metricKeys.length, sortedFrequencyKeys.length);

        for (let i = 0; i < maxRows; i++) {
            const metric = metricKeys[i] || "";
            let value = metric ? values[metric] : "";
            let skewness = metric === "Skewness" ? values.skewness || "" : "";
            let kurtosis = metric === "Kurtosis" ? values.kurtosis || "" : "";
            const difference = sortedFrequencyKeys[i] !== undefined ? sortedFrequencyKeys[i] : "";
            let observedFrequency = frequencyDistribution[difference] || "";
            let expectedProbability = (observedFrequency ? (observedFrequency / totalRuns).toFixed(6) : "");
            let cumulativeProbability = cumulativeData[difference]?.cumulativeP || "";

            csvContent += `${categoryLabel},${metric},${value},${skewness},${kurtosis},${expectedProbability},${observedFrequency},${cumulativeProbability},\n`;
        }
    });

    return csvContent;
}
🔹 This ensures that Skewness and Kurtosis are also included in the CSV.

✅ Step 4: Ensure Skewness & Kurtosis Appear in All Calculations
Modify where stats are computed & passed inside processData().

Update processData()
Find:

js
Copy
Edit
statsCollection[category] = calculateDescriptiveStatistics(differences[category]);
Replace with:

js
Copy
Edit
statsCollection[category] = calculateDescriptiveStatistics(differences[category]);
statsCollection[category].skewness = calculateDescriptiveStatistics(differences[category]).skewness;
statsCollection[category].kurtosis = calculateDescriptiveStatistics(differences[category]).kurtosis;
Repeat this for:

Group sums
Density
Variance
Max Hits
function processData(rows, isGeneratingReferenceData = false) {
    console.log("🟢 Processing Final Data...");

    if (!Array.isArray(rows) || rows.length === 0) {
        console.error("❌ ERROR: rows is missing or invalid! Aborting processing.");
        return;
    }

    // ✅ Declare 'differences' FIRST before using it
    let statsCollection = {};
    const differences = { 
        topBottomDiff: [], 
        leftRightDiff: [], 
        cDiff: [], 
        zzDiff: [], 
        varianceDifference: [] 
    };
    const groupSums = {};
    let densityValues = [];
    let varianceValues = [];

    console.log("🟢 Verifying category assignments in processData...");

    // ✅ Initialize all groups before using them
    for (const key in groupIndices) {
        groupSums[key] = [];
    }

    let maxHits = Array(38).fill(0);

    rows.forEach(counts => {
        for (const key in groupIndices) {
            groupSums[key].push(sumColumns(counts, groupIndices[key]));
        }

        const sums = calculateAllSums(counts);
        differences.topBottomDiff.push(sums.topBottomDiff);
        differences.leftRightDiff.push(sums.leftRightDiff);
        differences.cDiff.push(sums.cDiff);
        differences.zzDiff.push(sums.zzDiff);

        let sortedCounts = counts.slice().sort((a, b) => b - a);
        let density = sortedCounts.slice(0, 5).reduce((sum, val) => sum + val, 0);
        densityValues.push(parseFloat(density.toFixed(4)));

        let variance = calculateVariance(counts);
        varianceValues.push(parseFloat(variance.toFixed(4)));

        // ✅ Variance Difference Calculation Inside Main Loop
        let topVariance = calculateVariance(counts.filter((_, index) => groupIndices.topIndices.includes(index)));
        let bottomVariance = calculateVariance(counts.filter((_, index) => groupIndices.bottomIndices.includes(index)));
        let varianceDiff = calculateVarianceDifference(topVariance, bottomVariance);
        differences.varianceDifference.push(varianceDiff);

        for (let i = 0; i < 38; i++) {
            if (counts[i] > maxHits[i]) {
                maxHits[i] = counts[i];
            }
        }
    });

    console.log("🟢 Density Values:", densityValues);
    console.log("🟢 Variance Values:", varianceValues);

    [densityValues, varianceValues] = validateDensityAndVariance(densityValues, varianceValues);

    // ✅ Compute statistics for differences (including skewness & kurtosis)
 Object.keys(differences).forEach(category => {
    let stats = calculateDescriptiveStatistics(differences[category]);
    statsCollection[category] = stats;
    statsCollection[category].skewness = stats.skewness;
    statsCollection[category].kurtosis = stats.kurtosis;
});


    // ✅ Compute statistics for group sums (including skewness & kurtosis)
Object.keys(groupSums).forEach(group => {
    let stats = calculateDescriptiveStatistics(groupSums[group]);
    statsCollection[group] = stats;
    statsCollection[group].skewness = stats.skewness;
    statsCollection[group].kurtosis = stats.kurtosis;
});

    // ✅ Compute statistics for variance difference (including skewness & kurtosis)
let varianceDiffStats = calculateDescriptiveStatistics(differences.varianceDifference);
statsCollection["varianceDifference"] = varianceDiffStats;
statsCollection["varianceDifference"].skewness = varianceDiffStats.skewness;
statsCollection["varianceDifference"].kurtosis = varianceDiffStats.kurtosis;

    // ✅ Compute statistics for density (including skewness & kurtosis)
let densityStats = calculateDescriptiveStatistics(densityValues);
statsCollection["Density"] = densityStats;
statsCollection["Density"].skewness = densityStats.skewness;
statsCollection["Density"].kurtosis = densityStats.kurtosis;

    // ✅ Compute statistics for variance (including skewness & kurtosis)
let varianceStats = calculateDescriptiveStatistics(varianceValues);
statsCollection["Variance"] = varianceStats;
statsCollection["Variance"].skewness = varianceStats.skewness;
statsCollection["Variance"].kurtosis = varianceStats.kurtosis;

    // ✅ Compute statistics for max hits (including skewness & kurtosis)
let maxHitsStats = calculateDescriptiveStatistics(maxHits);
statsCollection["MaxHits"] = maxHitsStats;
statsCollection["MaxHits"].skewness = maxHitsStats.skewness;
statsCollection["MaxHits"].kurtosis = maxHitsStats.kurtosis;

    console.log("✅ Data Processed, Displaying Results...");
    
    if (!statsCollection || Object.keys(statsCollection).length === 0) {
        console.error("❌ ERROR: statsCollection is empty or invalid!");
        return;
    }

    displayResults(differences, groupSums, statsCollection, densityValues, varianceValues);

    // 🟢 Generate dynamic filename
    const today = new Date().toISOString().split("T")[0];  // YYYY-MM-DD format
    const updatedFileName = `Analysis_${totalRuns}_${today}.csv`;

    exportCombinedCSV(differences, groupSums, statsCollection, maxHits, densityValues, varianceValues, updatedFileName);

    // 🔥 Only export reference data when generating it (not during user tests)
    if (!isGeneratingReferenceData) {
        exportReferenceDataCSV();
    }
}
